{"version":3,"file":"application-47ddc327ad3b87e7fe06ee11fd86c7f2.css","sources":["webpack:///./app/javascript/components/app/javascript/components/paginate.vue","webpack:///./app/javascript/components/app/javascript/components/select2.vue"],"sourcesContent":["<template>\n  <ul :class=\"containerClass\" v-if=\"!noLiSurround\">\n    <li :class=\"[prevClass, { disabled: firstPageSelected() }]\">\n      <a @click=\"prevPage()\" @keyup.enter=\"prevPage()\" :class=\"prevLinkClass\" tabindex=\"0\"><slot name=\"prevContent\">{{ prevText }}</slot></a>\n    </li>\n    <li v-for=\"page in pages\" :class=\"[pageClass, page.selected ? activeClass : '', { disabled: page.disabled } ]\">\n      <a v-if=\"page.disabled\" :class=\"pageLinkClass\" tabindex=\"0\">{{ page.content }}</a>\n      <a v-else @click=\"handlePageSelected(page.index)\" @keyup.enter=\"handlePageSelected(page.index)\" :class=\"pageLinkClass\" tabindex=\"0\">{{ page.content }}</a>\n    </li>\n    <li :class=\"[nextClass, { disabled: lastPageSelected() }]\">\n      <a @click=\"nextPage()\" @keyup.enter=\"nextPage()\" :class=\"nextLinkClass\" tabindex=\"0\"><slot name=\"nextContent\">{{ nextText }}</slot></a>\n    </li>\n  </ul>\n\n  <div :class=\"containerClass\" v-else>\n    <a @click=\"prevPage()\" @keyup.enter=\"prevPage()\" :class=\"[prevLinkClass, { disabled: firstPageSelected() }]\" tabindex=\"0\"><slot name=\"prevContent\">{{ prevText }}</slot></a>\n    <template v-for=\"page in pages\">\n      <a v-if=\"page.disabled\" :class=\"[pageLinkClass, page.selected ? activeClass : '', { disabled: page.disabled }]\" tabindex=\"0\">{{ page.content }}</a>\n      <a v-else @click=\"handlePageSelected(page.index)\" @keyup.enter=\"handlePageSelected(page.index)\" :class=\"[pageLinkClass, { active: page.selected, disabled: page.disabled }]\" tabindex=\"0\">\n        {{ page.content }}\n      </a>\n    </template>\n    <a @click=\"nextPage()\" @keyup.enter=\"nextPage()\" :class=\"[nextLinkClass, { disabled: lastPageSelected() }]\" tabindex=\"0\"><slot name=\"nextContent\">{{ nextText }}</slot></a>\n  </div>\n</template>\n\n<script>\n\nmodule.exports = {\n  name: \"paginate\",\n  props: {\n    pageCount: {\n      type: Number,\n      required: true\n    },\n    itemsLimit: {\n      type: Number,\n      required: true\n    },\n    initialPage: {\n      type: Number,\n      default: 0\n    },\n    forcePage: {\n      type: Number\n    },\n    clickHandler: {\n      type: Function,\n      default: () => ({ })\n    },\n    pageRange: {\n      type: Number,\n      default: 3\n    },\n    marginPages: {\n      type: Number,\n      default: 1\n    },\n    prevText: {\n      type: String,\n      default: 'Prev'\n    },\n    nextText: {\n      type: String,\n      default: 'Next'\n    },\n    containerClass: {\n      type: String\n    },\n    pageClass: {\n      type: String\n    },\n    pageLinkClass: {\n      type: String\n    },\n    prevClass: {\n      type: String\n    },\n    prevLinkClass: {\n      type: String\n    },\n    nextClass: {\n      type: String\n    },\n    nextLinkClass: {\n      type: String\n    },\n    activeClass: {\n      type: String,\n      default: 'active'\n    },\n    noLiSurround: {\n      type: Boolean,\n      default: false\n    },\n\n  },\n  data() {\n    return {\n      limit: this.itemsLimit,\n      selected: this.initialPage,\n    }\n  },\n  beforeUpdate() {\n    if (this.forcePage === undefined) return\n    if (this.forcePage !== this.selected) {\n      this.selected = this.forcePage\n    }\n  },\n  watch: {\n    pageCount: function (newAmount) {\n      this.pageCount = newAmount;\n      this.selected = this.initialPage = 0;\n    },\n    limit: function (newAmount) {\n      this.limit = newAmount;\n      this.$parent.$emit('limit', Number(newAmount))\n    },\n\n  },\n  created: function() {\n    this.$parent.$emit('limit', this.limit)\n  },\n  computed: {\n    pages: function () {\n      let items = {}\n      if (this.pageCount <= this.pageRange) {\n        for (let index = 0; index < this.pageCount; index++) {\n          let page = {\n            index: index,\n            content: index + 1,\n            selected: index === this.selected\n          }\n          items[index] = page\n        }\n      } else {\n        let leftPart = this.pageRange / 2\n        let rightPart = this.pageRange - leftPart\n\n        if (this.selected < leftPart) {\n          leftPart = this.selected\n          rightPart = this.pageRange - leftPart\n        } else if (this.selected > this.pageCount - this.pageRange / 2) {\n          rightPart = this.pageCount - this.selected\n          leftPart = this.pageRange - rightPart\n        }\n\n        let setPageItem = index => {\n          let page = {\n            index: index,\n            content: index + 1,\n            selected: index === this.selected\n          }\n\n          items[index] = page\n        }\n\n        let setBreakView = index => {\n          let breakView = {\n            content: '...',\n            disabled: true\n          }\n\n          items[index] = breakView\n        }\n\n        // 1st - loop thru low end of margin pages\n        for (let i = 0; i < this.marginPages; i++) {\n          setPageItem(i);\n        }\n\n        // 2nd - loop thru selected range\n        let selectedRangeLow = 0;\n        if (this.selected - this.pageRange > 0) {\n          selectedRangeLow = this.selected - this.pageRange;\n        }\n\n        // 3rd - loop thru high end of margin pages\n        let selectedRangeHigh = this.pageCount;\n        if (this.selected + this.pageRange < this.pageCount) {\n          selectedRangeHigh = this.selected + this.pageRange;\n        }\n\n        for (let i = selectedRangeLow; i <= selectedRangeHigh && i <= this.pageCount - 1; i++) {\n          setPageItem(i);\n        }\n\n        // Check if there is breakView in the left of selected range\n        if (selectedRangeLow > this.marginPages) {\n          setBreakView(selectedRangeLow - 1)\n        }\n\n        // Check if there is breakView in the right of selected range\n        if (selectedRangeHigh + 1 < this.pageCount - this.marginPages) {\n          setBreakView(selectedRangeHigh + 1)\n        }\n        // 2nd - loop thru high end of margin pages\n        for (let i = this.pageCount - 1; i >= this.pageCount - this.marginPages; i--) {\n          setPageItem(i);\n        }\n      }\n      return items\n    }\n  },\n\n  methods: {\n    handlePageSelected(selected) {\n      if (this.selected === selected) return\n\n      this.selected = selected\n\n      this.clickHandler(this.selected + 1)\n    },\n    prevPage() {\n      if (this.selected <= 0) return\n\n      this.selected--\n\n      this.clickHandler(this.selected + 1)\n    },\n    nextPage() {\n      if (this.selected >= this.pageCount - 1) return\n\n      this.selected++\n\n      this.clickHandler(this.selected + 1)\n    },\n    firstPageSelected() {\n      return this.selected === 0\n    },\n    lastPageSelected() {\n      return (this.selected === this.pageCount - 1) || (this.pageCount === 0)\n    }\n  }\n}\n</script>\n\n<style lang=\"css\" scoped>\na {\n  cursor: pointer;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// ./app/javascript/components/app/javascript/components/paginate.vue?fd3c9e4e","<template>\n    <select class=\"select2-enable\">\n        <slot></slot>\n    </select>\n</template>\n\n<script>\n  import $ from 'jquery';\n  import 'select2';\n  // globally assign select2 fn to $ element\n//  require('select2/dist/css/select1.css');\n//  require('select2/dist/css/select2.css');\n  import 'select2/dist/css/select2.css';\n\n  export default {\n    props: {\n      options: {},\n      value: {},\n      placeholder: {\n        default: false\n      },\n    },\n    mounted: function () {\n      var vm = this;\n      $(this.$el).ready(() => {\n        $(this.$el)\n        // init select2\n          .select2({data: this.options, placeholder: vm.placeholder})\n          .val(this.value)\n          .trigger('change')\n          // emit event on change.\n          .on('change', function () {\n            vm.$emit('input', this.value)\n          })\n      })\n    },\n    watch: {\n      value: function (value) {\n        // update value\n        $(this.$el).val(value)\n      },\n      options: function (options) {\n        // update options\n        $(this.$el).empty().select2({ data: options })\n      }\n    },\n    destroyed: function () {\n      $(this.$el).off().select2('destroy')\n    }\n  }\n\n</script>\n\n<style>\n    .select2 {\n        min-width: 200px;\n    }\n</style>\n\n\n// WEBPACK FOOTER //\n// ./app/javascript/components/app/javascript/components/select2.vue?1abe0f0c"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8OA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1LA;AACA;AACA;","sourceRoot":""}