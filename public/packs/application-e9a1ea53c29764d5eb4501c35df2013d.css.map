{"version":3,"file":"application-e9a1ea53c29764d5eb4501c35df2013d.css","sources":["webpack:///./app/javascript/components/app/javascript/components/paginate.vue","webpack:///./app/javascript/components/app/javascript/components/post_form.vue"],"sourcesContent":["<template>\n  <ul :class=\"containerClass\" v-if=\"!noLiSurround\">\n    <li :class=\"[prevClass, { disabled: firstPageSelected() }]\">\n      <a @click=\"prevPage()\" @keyup.enter=\"prevPage()\" :class=\"prevLinkClass\" tabindex=\"0\"><slot name=\"prevContent\">{{ prevText }}</slot></a>\n    </li>\n    <li v-for=\"page in pages\" :class=\"[pageClass, page.selected ? activeClass : '', { disabled: page.disabled } ]\">\n      <a v-if=\"page.disabled\" :class=\"pageLinkClass\" tabindex=\"0\">{{ page.content }}</a>\n      <a v-else @click=\"handlePageSelected(page.index)\" @keyup.enter=\"handlePageSelected(page.index)\" :class=\"pageLinkClass\" tabindex=\"0\">{{ page.content }}</a>\n    </li>\n    <li :class=\"[nextClass, { disabled: lastPageSelected() }]\">\n      <a @click=\"nextPage()\" @keyup.enter=\"nextPage()\" :class=\"nextLinkClass\" tabindex=\"0\"><slot name=\"nextContent\">{{ nextText }}</slot></a>\n    </li>\n  </ul>\n\n  <div :class=\"containerClass\" v-else>\n    <a @click=\"prevPage()\" @keyup.enter=\"prevPage()\" :class=\"[prevLinkClass, { disabled: firstPageSelected() }]\" tabindex=\"0\"><slot name=\"prevContent\">{{ prevText }}</slot></a>\n    <template v-for=\"page in pages\">\n      <a v-if=\"page.disabled\" :class=\"[pageLinkClass, page.selected ? activeClass : '', { disabled: page.disabled }]\" tabindex=\"0\">{{ page.content }}</a>\n      <a v-else @click=\"handlePageSelected(page.index)\" @keyup.enter=\"handlePageSelected(page.index)\" :class=\"[pageLinkClass, { active: page.selected, disabled: page.disabled }]\" tabindex=\"0\">\n        {{ page.content }}\n      </a>\n    </template>\n    <a @click=\"nextPage()\" @keyup.enter=\"nextPage()\" :class=\"[nextLinkClass, { disabled: lastPageSelected() }]\" tabindex=\"0\"><slot name=\"nextContent\">{{ nextText }}</slot></a>\n  </div>\n</template>\n\n<script>\n\nmodule.exports = {\n  name: \"paginate\",\n  props: {\n    pageCount: {\n      type: Number,\n      required: true\n    },\n    itemsLimit: {\n      type: Number,\n      required: true\n    },\n    initialPage: {\n      type: Number,\n      default: 0\n    },\n    forcePage: {\n      type: Number\n    },\n    clickHandler: {\n      type: Function,\n      default: () => ({ })\n    },\n    pageRange: {\n      type: Number,\n      default: 3\n    },\n    marginPages: {\n      type: Number,\n      default: 1\n    },\n    prevText: {\n      type: String,\n      default: 'Prev'\n    },\n    nextText: {\n      type: String,\n      default: 'Next'\n    },\n    containerClass: {\n      type: String\n    },\n    pageClass: {\n      type: String\n    },\n    pageLinkClass: {\n      type: String\n    },\n    prevClass: {\n      type: String\n    },\n    prevLinkClass: {\n      type: String\n    },\n    nextClass: {\n      type: String\n    },\n    nextLinkClass: {\n      type: String\n    },\n    activeClass: {\n      type: String,\n      default: 'active'\n    },\n    noLiSurround: {\n      type: Boolean,\n      default: false\n    },\n\n  },\n  data() {\n    return {\n      limit: this.itemsLimit,\n      selected: this.initialPage,\n    }\n  },\n  beforeUpdate() {\n    if (this.forcePage === undefined) return\n    if (this.forcePage !== this.selected) {\n      this.selected = this.forcePage\n    }\n  },\n  watch: {\n    pageCount: function (newAmount) {\n      this.pageCount = newAmount;\n      this.selected = this.initialPage = 0;\n    },\n    limit: function (newAmount) {\n      this.limit = newAmount;\n      this.$parent.$emit('limit', Number(newAmount))\n    },\n\n  },\n  created: function() {\n    this.$parent.$emit('limit', this.limit)\n  },\n  computed: {\n    pages: function () {\n      let items = {}\n      if (this.pageCount <= this.pageRange) {\n        for (let index = 0; index < this.pageCount; index++) {\n          let page = {\n            index: index,\n            content: index + 1,\n            selected: index === this.selected\n          }\n          items[index] = page\n        }\n      } else {\n        let leftPart = this.pageRange / 2\n        let rightPart = this.pageRange - leftPart\n\n        if (this.selected < leftPart) {\n          leftPart = this.selected\n          rightPart = this.pageRange - leftPart\n        } else if (this.selected > this.pageCount - this.pageRange / 2) {\n          rightPart = this.pageCount - this.selected\n          leftPart = this.pageRange - rightPart\n        }\n\n        let setPageItem = index => {\n          let page = {\n            index: index,\n            content: index + 1,\n            selected: index === this.selected\n          }\n\n          items[index] = page\n        }\n\n        let setBreakView = index => {\n          let breakView = {\n            content: '...',\n            disabled: true\n          }\n\n          items[index] = breakView\n        }\n\n        // 1st - loop thru low end of margin pages\n        for (let i = 0; i < this.marginPages; i++) {\n          setPageItem(i);\n        }\n\n        // 2nd - loop thru selected range\n        let selectedRangeLow = 0;\n        if (this.selected - this.pageRange > 0) {\n          selectedRangeLow = this.selected - this.pageRange;\n        }\n\n        // 3rd - loop thru high end of margin pages\n        let selectedRangeHigh = this.pageCount;\n        if (this.selected + this.pageRange < this.pageCount) {\n          selectedRangeHigh = this.selected + this.pageRange;\n        }\n\n        for (let i = selectedRangeLow; i <= selectedRangeHigh && i <= this.pageCount - 1; i++) {\n          setPageItem(i);\n        }\n\n        // Check if there is breakView in the left of selected range\n        if (selectedRangeLow > this.marginPages) {\n          setBreakView(selectedRangeLow - 1)\n        }\n\n        // Check if there is breakView in the right of selected range\n        if (selectedRangeHigh + 1 < this.pageCount - this.marginPages) {\n          setBreakView(selectedRangeHigh + 1)\n        }\n        // 2nd - loop thru high end of margin pages\n        for (let i = this.pageCount - 1; i >= this.pageCount - this.marginPages; i--) {\n          setPageItem(i);\n        }\n      }\n      return items\n    }\n  },\n\n  methods: {\n    handlePageSelected(selected) {\n      if (this.selected === selected) return\n\n      this.selected = selected\n\n      this.clickHandler(this.selected + 1)\n    },\n    prevPage() {\n      if (this.selected <= 0) return\n\n      this.selected--\n\n      this.clickHandler(this.selected + 1)\n    },\n    nextPage() {\n      if (this.selected >= this.pageCount - 1) return\n\n      this.selected++\n\n      this.clickHandler(this.selected + 1)\n    },\n    firstPageSelected() {\n      return this.selected === 0\n    },\n    lastPageSelected() {\n      return (this.selected === this.pageCount - 1) || (this.pageCount === 0)\n    }\n  }\n}\n</script>\n\n<style lang=\"css\" scoped>\na {\n  cursor: pointer;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// ./app/javascript/components/app/javascript/components/paginate.vue?fd3c9e4e","<template>\n    <div>\n        <form id=\"post_form\" :action=\"path\" accept-charset=\"UTF-8\" method=\"post\" class=\"new_post\" @submit.prevent=\"validate($event)\" >\n\n            <input v-if=\"mtd == 'put'\" type=\"hidden\" name=\"_method\" value=\"put\">\n            <input name=\"utf8\" value=\"âœ“\" type=\"hidden\">\n            <input name=\"authenticity_token\" :value=\"csrf_token\" type=\"hidden\">\n            <div class=\"form-group row\">\n                <div class=\"col-xs-6\">\n                    <div>\n                        <label for=\"post_category\">Category</label>\n                        <select2 :options=\"categories_list\"\n                                 :value=\"post.category_id\"\n                                 data-vv-name=\"category_id\"\n                                 v-validate=\"'required'\"\n                                 v-model=\"post.category_id\"\n                                 name=\"post[category_id]\"\n                                 id=\"post_category_id\"\n                                 placeholder=\"Select category\" >\n                        </select2>\n                        <p class=\"text-danger\" v-if=\"errors.has('category_id')\">{{ errors.first('category_id') }}</p>\n                    </div>\n                    <div>\n                        <label for=\"post_name\">Name</label>\n                        <input v-model=\"post.name\" data-vv-name=\"post_name\" v-validate=\"'required'\" name=\"post[name]\" id=\"post_name\" type=\"text\">\n                        <p class=\"text-danger\" v-if=\"errors.has('post_name')\">{{ errors.first('post_name') }}</p>\n                    </div>\n                    <div>\n                        <label for=\"post_body\">Body</label>\n\n                        <tinymce  v-model=\"post.body\"\n                                  data-vv-name=\"post_body\"\n                                  v-validate=\"'required'\"\n                                  name=\"post[body]\"\n                                  id=\"post_body\"\n                                  class=\"form-control tinymce\"\n                                  :options=\"options\" @change=\"changed\" :content='content'>\n                        </tinymce>\n                        <p class=\"text-danger\" v-if=\"errors.has('post_body')\">{{ errors.first('post_body') }}</p>\n                    </div>\n                </div>\n            </div>\n            <button name=\"button\" type=\"submit\"  class=\"btn btn-default\">Save</button>\n        </form>\n    </div>\n</template>\n\n<script>\n//  require('tinymce')\n//  require('tinymce/themes/modern/theme')\n  import select2 from './select2.vue'\n  import tinymce from 'tinymce/tinymce'\n  import 'tinymce/themes/modern/theme';\n  import 'tinymce/plugins/paste';\n  import 'tinymce/plugins/link';\n\n\n\nexport default {\n    components:{\n      'select2': select2,\n//      'tiny-mce': TinyMCE,\n    },\n    props: {\n      path: {\n        type: String,\n        required: true,\n      },\n\n      mtd: {\n        type: String,\n        default: ''\n      },\n      post_data: {\n//        type: Object,\n        default:  '{}'\n      },\n    },\n  //<pre><code class=\"bash\">TEXT</code></pre>\n    data: function() {\n      var code_style = \"\" +\n        \"code.ruby:before{background: url('/assets/languages/ruby.png') CENTER CENTER NO-REPEAT; content: url('/assets/1x16.png'); width:16px;} \" +\n        \"code{padding: 2px 4px; border: #AAA 1px solid; border-radius: 6px}\"\n\n\n      var LanguagesArray = [\n        'codeblock', 'bash', 'yaml', 'javascript', 'coffeescript',\n        'css', 'json', 'erb', 'slim', 'haml', 'html', 'xml', 'ruby', 'sql'\n      ]\n\n      var language_formats = {}\n      var arrayLength = LanguagesArray.length\n      for (var i = 0; i < arrayLength; i++) {\n        language_formats[LanguagesArray[i]] = {inline: 'code', attributes: {class: LanguagesArray[i]}}\n      }\n      language_formats['pre'] = {block: 'pre'}\n\n      return {\n        content: '',\n\n        options: {\n          width: '600',\n          content_style: code_style,\n          branding: false,\n//          mode: \"textareas\",\n          force_br_newlines: false,\n          force_p_newlines: false,\n          forced_root_block: '',\n          menubar: 'edit view format',\n          formats: language_formats,\n//          plugins : 'advlist autolink link image lists charmap print preview',\n          toolbar1: 'undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | table | fontsizeselect',\n          toolbar2: LanguagesArray.join(' | '),\n\n          setup: function (editor) {\n            console.log(language_formats)\n            var arrayLength = LanguagesArray.length;\n            for (var i = 0; i < arrayLength; i++) {\n              var tmpLanguage = LanguagesArray[i]\n              editor.addButton(tmpLanguage, {\n                text: tmpLanguage,\n                icon: false,\n//                image : './images/T.jpg',\n                onclick: function (e) {\n                  var ed = tinymce.activeEditor;\n//                  addButton(LanguagesArray[i]);\n//                  tinymce.activeEditor.formatter.toggle(this.settings.text)\n                  var text = ed.selection.getContent({'format': 'html'});\n                  console.log(ed.getContent());\n                  console.log(ed.selection);\n                  console.log(ed.selection.getRng());\n\n                  if(text && text.length > 0) {\n                    var c = ed.selection.getNode().nodeName;\n                    if(c!=\"CODE\") {\n\n                      node = ed.selection.getNode();\n\n                      with(document.getElementById(iframe_id).contentWindow){\n                        var newElement = document.createElement(\"code\");\n                        newElement.innerHTML = node.innerHTML;\n                      }\n\n                      node.parentNode.replaceChild(newElement, node);\n\n                    }\n                    else {\n\n                      node = ed.selection.getNode();\n\n                      with(document.getElementById(iframe_id).contentWindow){\n                        var newElement = document.createTextNode(node.innerHTML);\n                      }\n\n                      node.parentNode.replaceChild(newElement, node);\n                    }\n//                    text.match('<code>')\n//                    ed.execCommand('mceReplaceContent', false, '<code class=\"' + this.settings.text + '\">'+text+'</code>');\n                  }\n//                  console.log(ed.getContent());\n//                  console.log(ed.selection);\n//                  console.log(ed.selection.get());\n\n                }\n              })\n            }\n          }\n        },\n        post: '',\n        csrf_token: undefined,\n        categories_list: [],\n      }\n    },\n    methods: {\n      changed (editor, content) {\n        this.post.post_body = content;\n      },\n\n      validate(event) {\n        event.preventDefault();\n        this.$validator.validateAll().then(result => {\n          if (result) {\n            document.querySelector('#post_form').submit();\n            return true\n//            alert('success');\n          }\n//          alert('failure');\n          return false\n        });\n      },\n    },\n    created: function() {\n      this.csrf_token = document.getElementsByName('csrf-token')[0].getAttribute('content');\n\n      var that = this;\n      $.ajax({\n        url: '/categories.json',\n        success: function(res) {\n          that.categories_list = res;\n        }\n      });\n      this.post = JSON.parse(this.post_data);\n      this.content = this.post.body;\n    },\n    computed: {\n\n    }\n\n  }\n</script>\n\n<style scoped>\n    @import url('//cdnjs.cloudflare.com/ajax/libs/tinymce/4.6.3/skins/lightgray/skin.min.css');\n    @import url('//cdnjs.cloudflare.com/ajax/libs/tinymce/4.6.3/skins/lightgray/content.min.css');\n    /*@import 'tinymce/skins/lightgray/skin.min.css';*/\n    /*@import 'tinymce/skins/lightgray/content.min.css';*/\n\n</style>\n\n\n// WEBPACK FOOTER //\n// ./app/javascript/components/app/javascript/components/post_form.vue?46ea5ded"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8OA;AACA;AACA;;AC1BA;AACA;AACA;","sourceRoot":""}